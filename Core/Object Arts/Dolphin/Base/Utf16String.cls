"Filed out from Dolphin Smalltalk 7"!

UtfEncodedString variableByteSubclass: #Utf16String
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Utf16String guid: (GUID fromString: '{87b4c51e-026e-11d3-9fd7-00a0cc3e4a32}')!
Utf16String isNullTerminated: true!
Utf16String comment: 'Utf16String is a minimal class to support UTF16 encoded wide character strings. Natively Dolphin uses byte-character strings at present.

Utf16Strings can be constructed from <String>s when needed by sending the #asUtf16String message, and converted back again by sending the #asString message.'!
!Utf16String categoriesForClass!Collections-Text! !
!Utf16String methodsFor!

asByteString: aClass
	"Private - Answer a byte-string encoded <String> of the specified class containing the same characters as the receiver."

	| bytes buf size |
	(size := self size) == 0 ifTrue: [^aClass empty].	"Avoid 'The Parameter is Incorrect' error"
	buf := aClass new: size * 4.
	bytes := KernelLibrary default
				wideCharToMultiByte: aClass codePage
				dwFlags: 0
				lpWideCharStr: self
				cchWideChar: size
				lpMultiByteStr: buf
				cchMultiByte: buf size
				lpDefaultChar: nil
				lpUsedDefaultChar: nil.
	bytes == 0 ifTrue: [^KernelLibrary default systemError].
	buf resize: bytes.
	^buf!

asLowercase
	"Answer a <readableString> which is a copy of the receiver but with the contents converted
	to lowercase."

	| copy |
	copy := self basicCopy.
	UserLibrary default stringLowerW: copy.
	^copy!

asSymbol
	^Symbol intern: self asUtf8String!

asUppercase
	"Answer a <readableString> which is a copy of the receiver but with the contents converted
	to uppercase."

	| copy |
	copy := self basicCopy.
	UserLibrary default stringUpperW: copy.
	^copy!

at: anInteger
	"Answer the character at index, anInteger, in the receiver."

	^Character value: (self wordAtOffset: anInteger + anInteger - 2)!

at: anInteger put: aCharacter
	"Replace the character at index, anInteger, in the receiver with aCharacter."

	^self wordAtOffset: anInteger + anInteger - 2 put: aCharacter asInteger!

beginsWith: aCollection
	"Answer whether the receiver begins with the sequence
	of objects in the <Collection> argument."

	^self basicBeginsWith: aCollection!

byteSize
	"Private - Answer the size in bytes of this object, including the null terminator."

	^self basicSize + 2!

copyToBuffer: anAddress ofSize: anInteger
	CRTLibrary default
		wcsncpy_s: anAddress
		bufferSize: anInteger
		strSource: self
		count: CRTConstants._TRUNCATE!

displayOn: aStream
	"Append the receiver in end-user form to aStream.
	We must convert to mbcs for display."

	aStream nextPutAll: self asString!

findString: aString startingAt: anInteger 
	"Answer the index of the <String> argument within the receiver, starting at the <integer>
	argument. If the receiver does not contain aString, answer 0."

	| size subSize firstElement |
	subSize := aString size.
	subSize == 0 ifTrue: [^0].
	firstElement := aString at: 1.
	size := self size.
	subSize == 1 
		ifTrue: 
			[^self 
				nextIndexOf: firstElement
				from: anInteger
				to: size].
	anInteger to: size - subSize + 1
		do: 
			[:i | 
			(self at: i) = firstElement 
				ifTrue: 
					[| j |
					j := 2.
					[(self at: i + j - 1) = (aString at: j)] whileTrue: 
							[j = subSize ifTrue: [^i].
							j := j + 1]]].
	^0!

first: anInteger
	"Answer a copy of the receiver comprising the leftmost anInteger elements."

	^self copyFrom: 1 to: anInteger!

indexOfSubCollection: targetSequence startingAt: start 
	"Answer the <integer> index of the next occurrence within the 
	receiver of the <sequencedReadableCollection> targetSequence,
	starting at the <integer> index start. If there are no such occurrences
	(or the search sequence is empty), answer 0."

	^self findString: targetSequence startingAt: start!

nextIdentityIndexOf: anElement from: start to: stop
	"Answer the index of the next occurrence of anElement in the receiver's indexable
	variables between startIndex and stopIndex inclusive. If there are no such occurrences, answer 0.
	Implementation Note: Override the inherited implementation because the byte-character search
	primitives won't work."

	^anElement class == Character 
		ifTrue: [self nextIndexOf: anElement from: start to: stop]
		ifFalse: [0 "Can only contain characters"]!

nextIndexOf: anElement from: start to: stop
	"Answer the index of the next occurrence of anElement in the receiver between 
	startIndex and stopIndex inclusive. If there are no such occurrences, answer 0."

	self from: start to: stop keysAndValuesDo: [:i :elem | elem = anElement ifTrue: [^i]].
	^0!

printOn: aStream
	self asString printOn: aStream!

replaceFrom: startInteger to: stopInteger with: aReadableString startingAt: startAtInteger 
	"Replace the characters of the receiver at index positions startInteger through stopInteger
	inclusive with consecutive characters of the <readableString>, aReadableString, beginning at
	index position startAtInteger. Answer the receiver."

	| offset |
	offset := startAtInteger - startInteger.
	"Perform overlapping moves backwards, otherwise forwards"
	(self == aReadableString and: [startAtInteger < startInteger]) 
		ifTrue: 
			[stopInteger to: startInteger
				by: -1
				do: [:i | self at: i put: (aReadableString at: offset + i)]]
		ifFalse: [startInteger to: stopInteger do: [:i | self at: i put: (aReadableString at: offset + i)]]!

resize: anInteger
	^super resize: anInteger * 2!

shallowCopy
	"Implemented here to ensure that copied Utf16Strings are correctly terminated with a double null"

	^self class fromAddress: self yourAddress length: self size!

size
	"Answer the number of code units in the receiver."

	^self basicSize bitShift: -1!

strcspn: aString start: anInteger
	^CRTLibrary default wcscspn: self yourAddress + ((anInteger - 1) * 2)
		strCharSet: aString asUtf16String!

wordAtOffset: anInteger
	"Private - Answer the unsigned 2 byte integer at offset (i.e. zero relative) anInteger in the receiver. 
	On iX86 the high and low order bytes are reversed; i.e. the bytes are ordered least 
	significant first.

	Primitive failure reasons:
		0 -	anInteger is not a SmallInteger.
		1 -	anInteger is out of bounds."

	| answer |
	<primitive: 124>
	answer := 0.
	2 to: 1 by: -1 do: [:i |
		answer := (answer bitShift: 8) + (self basicAt: anInteger + i)].
	^answer!

wordAtOffset: anInteger put: anObject
	"Private - Store an unsigned 16-bit value at byte offset anInteger within the receiver.
	If anObject is not representable as a 16-bit unsigned (Small)Integer, then 
	raise a 'cannot hold' error.

	Primitive failure reasons:
		0 -	anInteger is not a SmallInteger.
		1 -	anInteger is out of bounds.
		2 -	anObject is not a SmallInteger
		3 -	anObject is not in the range -32768..32767 (i.e. out of signed 16-bit range)."

	<primitive: 125>
	^self primitiveFailed! !
!Utf16String categoriesFor: #asByteString:!converting!private! !
!Utf16String categoriesFor: #asLowercase!converting!public! !
!Utf16String categoriesFor: #asSymbol!converting!public! !
!Utf16String categoriesFor: #asUppercase!converting!public! !
!Utf16String categoriesFor: #at:!accessing!public! !
!Utf16String categoriesFor: #at:put:!accessing!public! !
!Utf16String categoriesFor: #beginsWith:!comparing!public! !
!Utf16String categoriesFor: #byteSize!accessing!private! !
!Utf16String categoriesFor: #copyToBuffer:ofSize:!constants!copying!public! !
!Utf16String categoriesFor: #displayOn:!printing!public! !
!Utf16String categoriesFor: #findString:startingAt:!public!searching! !
!Utf16String categoriesFor: #first:!copying!public! !
!Utf16String categoriesFor: #indexOfSubCollection:startingAt:!public!searching! !
!Utf16String categoriesFor: #nextIdentityIndexOf:from:to:!public!searching! !
!Utf16String categoriesFor: #nextIndexOf:from:to:!public!searching! !
!Utf16String categoriesFor: #printOn:!printing!public! !
!Utf16String categoriesFor: #replaceFrom:to:with:startingAt:!public!replacing! !
!Utf16String categoriesFor: #resize:!mutating!public! !
!Utf16String categoriesFor: #shallowCopy!public! !
!Utf16String categoriesFor: #size!accessing!public! !
!Utf16String categoriesFor: #strcspn:start:!private!searching! !
!Utf16String categoriesFor: #wordAtOffset:!accessing!primitives!private! !
!Utf16String categoriesFor: #wordAtOffset:put:!accessing!primitives!private! !

!Utf16String class methodsFor!

codePage
	^self shouldNotImplement!

elementSize
	"Answer the size of the elements of the receiver in bytes."

	^2!

encode: aCharacter on: aPuttableStream
	| codePoint |
	codePoint := aCharacter codePoint.
	^codePoint <= 16rFFFF
		ifTrue: [aPuttableStream nextWORDPut: codePoint]
		ifFalse: 
			[codePoint := codePoint - 16r10000.
			aPuttableStream
				nextWORDPut: (codePoint bitShift: -10) + 16rD800;
				nextWORDPut: (codePoint bitAnd: 16r3FF) + 16rDC00]!

fromAddress: anAddress
	"Answer a new String instantiated from the null terminated string at anAddress."

	| len |
	len := KernelLibrary default lstrlenW: anAddress.
	^self fromAddress: anAddress length: len!

fromAddress: anAddress length: anInteger
	"Answer a new <Utf16String>, of length anInteger, copied from the first anInteger
	code units pointed at by anAddress."

	^anAddress isNull
		ifFalse: 
			[| answer |
			answer := self new: anInteger.
			anAddress asExternalAddress
				replaceBytesOf: answer
				from: 1
				to: anInteger * 2
				startingAt: 1.
			answer]!

fromAtomId: anInteger
	"Answer a new string which is a copy of the atom with id anInteger."

	| atomName |
	^(atomName := self new: 255)
		leftString: (KernelLibrary default getAtomName: anInteger lpBuffer: atomName nSize: atomName size)!

fromString: aString
	"Answer an instance of the receiver containing the same characters as the <String>
	argument."

	^aString asUtf16String!

initialize
	encoding := EncodingUtf16.
	empty := self new
				isImmutable: true;
				yourself.
	VMLibrary default registryAt: #Utf16String put: self!

new: anInteger
	"Answer an instance of the receiver to accomodate exactly
	anInteger characters (plus a null-term)."

	^super new: anInteger*2!

new: elementCount withAll: elementValue
	"Answer a new instance of the receiver with <integer>, elementCount, 
	elements, each of which is initialized to the <Object>, elementValue.
	Note that the result will be of size elementCount * codeUnitsFor(elementValue)."

	| stream codePoint |
	stream := ByteArray writeStream: elementCount * 2.
	codePoint := elementValue codePoint.
	codePoint <= 16rFFFF
		ifTrue: [elementCount timesRepeat: [stream nextWORDPut: codePoint]]
		ifFalse: 
			[| l h |
			codePoint := codePoint - 16r10000.
			l := (codePoint bitShift: -10) + 16rD800.
			h := (codePoint bitAnd: 16r3FF) + 16rDC00.
			elementCount timesRepeat: 
					[stream
						nextWORDPut: l;
						nextWORDPut: h]].
	^self fromByteArray: stream contents!

newFixed: aSmallInteger 
	"Answer an instance of the receiver of size aSmallInteger bytes (this method is 
	only valid for byte objects). The object is allocated from the fixed memory heap
	and will not move in memory (objects allocated with primitive 71 are free to 
	move to assist garbage collection, whereas those allocated with primitive 76 
	are in a traditional fixed heap)."

	^super newFixed: aSmallInteger * 2! !
!Utf16String class categoriesFor: #codePage!constants!public! !
!Utf16String class categoriesFor: #elementSize!constants!public! !
!Utf16String class categoriesFor: #encode:on:!helpers!private! !
!Utf16String class categoriesFor: #fromAddress:!instance creation!public! !
!Utf16String class categoriesFor: #fromAddress:length:!instance creation!public! !
!Utf16String class categoriesFor: #fromAtomId:!instance creation!public! !
!Utf16String class categoriesFor: #fromString:!instance creation!public! !
!Utf16String class categoriesFor: #initialize!development!initializing!public! !
!Utf16String class categoriesFor: #new:!instance creation!public! !
!Utf16String class categoriesFor: #new:withAll:!instance creation!public! !
!Utf16String class categoriesFor: #newFixed:!instance creation!public! !

